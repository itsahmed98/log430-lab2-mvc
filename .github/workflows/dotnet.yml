name: CI/CD .NET Docker

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install .NET 8.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Lint / Format check
        run: dotnet format --verify-no-changes
        continue-on-error: true

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Set Docker image tag
        id: tag
        run: echo "::set-output name=IMAGE_TAG::$(date +'%Y%m%d%H%M')"

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: magasincentral
      DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/magasincentral
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          echo "Building Docker image with tags: $IMAGE_NAME:latest and $DOCKERHUB_REPO:${{ needs.build-and-test.outputs.image-tag }}"
          docker build . \
            --tag $IMAGE_NAME:latest \
            --tag $DOCKERHUB_REPO:${{ needs.build-and-test.outputs.image-tag }} \
            .

      - name: Push Docker image
        run: |
          docker push $DOCKERHUB_REPO:latest
          docker push $DOCKERHUB_REPO:${{ needs.build-and-test.outputs.image-tag }}

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          port: 22
          script: |
            cd ~/magasincentral
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker-compose pull
            docker-compose up -d --remove-orphans
